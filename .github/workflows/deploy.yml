name: CI/CD

# main 브랜치에 코드가 push 될 때 실행
on:
  push:
    branches:
      - "step3"

env:
  KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 지정한 저장소(현재 REPO)에서 코드를 워크플로우 환경으로 가져오도록 하는 github action
      - name: Checkout code
        uses: actions/checkout@v3

      # Java를 설정하는 github action
      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'adopt'

      # 빌드
      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean bootjar -x test

      # Docker Hub 로그인
      - name: Login to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_REPO }}:latest .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_REPO }}:latest

      # EC2 접근
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          port: 22
          script: |
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=80-8080")
            
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            
            sudo docker pull ${{ secrets.DOCKER_REPO }}:latest
            sudo docker run -d -p 8080:8080 --name spring-app ${{ secrets.DOCKER_REPO }}:latest